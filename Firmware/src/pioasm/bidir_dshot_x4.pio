.program bidir_dshot_x4
; total ticks per bit (to ESC): 40
; long sequence ticks: 15
; short sequence ticks: 10
; one bit: long (0) + long (data) + short (1)

; ticks per bit from ESC: 32
; using 4x oversampling (edge detection in c++ code),
; sampling takes place every 8th tick, so 4 samples per bit

; write 16x4 bits, coming from 2 words (autopull)
set pindirs, 0b1111; set pins to output
write_one_bit:
set pins, 0b0000 [14]; set pins to 0 (inverted dshot)
out pins, 4 [14]; output 4 bits, one for each ESC
set pins, 0b1111 [6]; set pins to 0 (inverted dshot)
jmp !OSRE write_one_bit; loop 8+8 times => 16 bits per ESC, 32 bits per autopull

; all 4 motors have their data now, switch pins to input and load counters
mov x, ~null
mov isr, null
in x, 7; isr is now 127
mov x, isr; x = 127, 126, 125, ..., 0 => 128 samples will be recorded per ESC
; 21 bits are sent by each ESC, but they might be out of sync from each other.
; with 128 samples per ESC, a timeframe of 32 bits is recorded, which is enough to capture the 21 bits
set pindirs, 0b0000; set pins to input

; trigger to start reading as soon as the first ESC pulls the line low
check_pins:
mov isr, ~null; set isr to 0xFFFFFFFF, reset isr counter to 0
in pins, 4
mov y, ~isr; copy 0x0000000x to y, where x is the inverse 4 bits read 
jmp !y check_pins; jump back as long as all pins are 1 (all pins 1 => y = 0)
jmp x-- record_pins[4]; x = 254

; record data from ESCs
record_pins:
in pins, 4; data is autopushed to RX FIFO and the DMA will automatically take it from there
jmp x-- record_pins [6]

; PIO program finished, loop forever, pio_sm_exec will jmp to the start of the program when new data is there
end:
jmp end

.define public CLKDIV_300_INT 22
.define public CLKDIV_300_FRAC 0
.define public CLKDIV_600_INT 11
.define public CLKDIV_600_FRAC 0
.define public CLKDIV_1200_INT 5
.define public CLKDIV_1200_FRAC 128