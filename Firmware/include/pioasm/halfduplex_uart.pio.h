// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------------- //
// halfduplex_uart //
// --------------- //

#define halfduplex_uart_wrap_target 1
#define halfduplex_uart_wrap 18

static const uint16_t halfduplex_uart_program_instructions[] = {
	0xa02b, //  0: mov    x, !null
			//     .wrap_target
	0x8080, //  1: pull   noblock
	0xa047, //  2: mov    y, osr
	0x00ae, //  3: jmp    x != y, 14
	0xe080, //  4: set    pindirs, 0
	0x00c1, //  5: jmp    pin, 1
	0xfe47, //  6: set    y, 7                   [30]
	0x5501, //  7: in     pins, 1                [21]
	0x0087, //  8: jmp    y--, 7
	0x00cc, //  9: jmp    pin, 12
	0xa0c3, // 10: mov    isr, null
	0x1401, // 11: jmp    1                      [20]
	0x8020, // 12: push   block
	0x0604, // 13: jmp    4                      [6]
	0xf281, // 14: set    pindirs, 1             [18]
	0xf600, // 15: set    pins, 0                [22]
	0x7501, // 16: out    pins, 1                [21]
	0x00f0, // 17: jmp    !osre, 16
	0xe001, // 18: set    pins, 1
			//     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program halfduplex_uart_program = {
	.instructions = halfduplex_uart_program_instructions,
	.length = 19,
	.origin = -1,
};

static inline pio_sm_config halfduplex_uart_program_get_default_config(uint offset) {
	pio_sm_config c = pio_get_default_sm_config();
	sm_config_set_wrap(&c, offset + halfduplex_uart_wrap_target, offset + halfduplex_uart_wrap);
	return c;
}
#endif
